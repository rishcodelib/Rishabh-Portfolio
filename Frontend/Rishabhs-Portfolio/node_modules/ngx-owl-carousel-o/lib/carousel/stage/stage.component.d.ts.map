{"version":3,"file":"stage.component.d.ts","sources":["stage.component.d.ts"],"names":[],"mappingssourcesContent":["import { NgZone, ElementRef, Renderer2, OnInit, OnDestroy } from '@angular/core';\r\nimport { CarouselService } from '../../services/carousel.service';\r\nimport { StageData } from '../../models/stage-data.model';\r\nimport { SlideModel } from '../../models/slide.model';\r\nimport { AnimateService } from '../../services/animate.service';\r\nexport declare class StageComponent implements OnInit, OnDestroy {\r\n    private zone;\r\n    private el;\r\n    private renderer;\r\n    private carouselService;\r\n    private animateService;\r\n    /**\r\n     * Object with settings which make carousel draggable by touch or mouse\r\n     */\r\n    owlDraggable: {\r\n        isMouseDragable: boolean;\r\n        isTouchDragable: boolean;\r\n    };\r\n    /**\r\n     * Data of owl-stage\r\n     */\r\n    stageData: StageData;\r\n    /**\r\n     *  Data of every slide\r\n     */\r\n    slidesData: SlideModel[];\r\n    /**\r\n     * Function wich will be returned after attaching listener to 'mousemove' event\r\n     */\r\n    listenerMouseMove: () => void;\r\n    /**\r\n     * Function wich will be returned after attaching listener to 'touchmove' event\r\n     */\r\n    listenerTouchMove: () => void;\r\n    /**\r\n     * Function wich will be returned after attaching listener to 'mousemove' event\r\n     */\r\n    listenerOneMouseMove: () => void;\r\n    /**\r\n     * Function wich will be returned after attaching listener to 'touchmove' event\r\n     */\r\n    listenerOneTouchMove: () => void;\r\n    /**\r\n     * Function wich will be returned after attaching listener to 'mouseup' event\r\n     */\r\n    listenerMouseUp: () => void;\r\n    /**\r\n     * Function wich will be returned after attaching listener to 'touchend' event\r\n     */\r\n    listenerTouchEnd: () => void;\r\n    /**\r\n     * Function wich will be returned after attaching listener to 'click' event\r\n     */\r\n    listenerOneClick: () => void;\r\n    listenerATag: () => void;\r\n    /**\r\n     * Object with data needed for dragging\r\n     */\r\n    private _drag;\r\n    /**\r\n     * Subject for notification when the carousel's rebuilding caused by resize event starts\r\n     */\r\n    private _oneDragMove$;\r\n    /**\r\n     * Subsctiption to _oneDragMove$ Subject\r\n     */\r\n    private _oneMoveSubsription;\r\n    preparePublicSlide: (slide: SlideModel) => SlideModel;\r\n    constructor(zone: NgZone, el: ElementRef, renderer: Renderer2, carouselService: CarouselService, animateService: AnimateService);\r\n    onMouseDown(event: any): void;\r\n    onTouchStart(event: any): boolean;\r\n    onTouchCancel(event: any): void;\r\n    onDragStart(): boolean;\r\n    onSelectStart(): boolean;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Passes this to _oneMouseTouchMove();\r\n     */\r\n    bindOneMouseTouchMove: (ev: any) => void;\r\n    /**\r\n     * Passes this to _onDragMove();\r\n     */\r\n    bindOnDragMove: (ev: any) => void;\r\n    /**\r\n     * Passes this to _onDragMove();\r\n     */\r\n    bindOnDragEnd: (ev: any) => void;\r\n    /**\r\n       * Handles `touchstart` and `mousedown` events.\r\n       * @todo Horizontal swipe threshold as option\r\n       * @todo #261\r\n       * @param event - The event arguments.\r\n       */\r\n    private _onDragStart;\r\n    /**\r\n     * Attaches listeners to `touchmove` and `mousemove` events; initiates updating carousel after starting dragging\r\n     * @param event event objech of mouse or touch event\r\n     */\r\n    private _oneMouseTouchMove;\r\n    /**\r\n     * Attaches handler to HTMLAnchorElement for preventing click while carousel is being dragged\r\n     * @param event event object\r\n     */\r\n    private blockClickAnchorInDragging;\r\n    /**\r\n     * Handles the `touchmove` and `mousemove` events.\r\n     * @todo #261\r\n     * @param event - The event arguments.\r\n     */\r\n    private _onDragMove;\r\n    /**\r\n     * Moves .owl-stage left-right\r\n     * @param coordinate coordinate to be set to .owl-stage\r\n     */\r\n    private _animate;\r\n    /**\r\n       * Handles the `touchend` and `mouseup` events.\r\n       * @todo #261\r\n       * @todo Threshold for click event\r\n       * @param event - The event arguments.\r\n       */\r\n    private _onDragEnd;\r\n    /**\r\n       * Prepares data for dragging carousel. It starts after firing `touchstart` and `mousedown` events.\r\n       * @param event - The event arguments.\r\n       * @returns stage - object with 'x' and 'y' coordinates of .owl-stage\r\n       */\r\n    private _prepareDragging;\r\n    /**\r\n     * Attaches handler for 'click' event on any element in .owl-stage in order to prevent dragging when moving of cursor is less than 3px\r\n     */\r\n    private _oneClickHandler;\r\n    /**\r\n     * Finishes dragging\r\n     * @param event object event of 'mouseUp' of 'touchend' events\r\n     */\r\n    private _finishDragging;\r\n    /**\r\n       * Gets unified pointer coordinates from event.\r\n       * @param event The `mousedown` or `touchstart` event.\r\n       * @returns Contains `x` and `y` coordinates of current pointer position.\r\n       */\r\n    private _pointer;\r\n    /**\r\n       * Gets the difference of two vectors.\r\n       * @param first The first vector.\r\n       * @param second The second vector.\r\n       * @returns The difference.\r\n       */\r\n    private _difference;\r\n    /**\r\n       * Checks whether the carousel is in a specific state or not.\r\n       * @param specificState The state to check.\r\n       * @returns The flag which indicates if the carousel is busy.\r\n       */\r\n    private _is;\r\n    /**\r\n    * Enters a state.\r\n    * @param name The state name.\r\n    */\r\n    private _enter;\r\n    /**\r\n       * Sends all data needed for View.\r\n       */\r\n    private _sendChanges;\r\n    /**\r\n     * Handler for transitioend event\r\n     */\r\n    onTransitionEnd(): void;\r\n    /**\r\n       * Enters into a 'dragging' state\r\n       */\r\n    private _enterDragging;\r\n    /**\r\n     * Handles the end of 'animationend' event\r\n     * @param id Id of slides\r\n     */\r\n    clear(id: any): void;\r\n}\r\n"]}