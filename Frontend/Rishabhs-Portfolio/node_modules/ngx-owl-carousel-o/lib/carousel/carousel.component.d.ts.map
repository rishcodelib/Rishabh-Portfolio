{"version":3,"file":"carousel.component.d.ts","sources":["carousel.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, AfterContentChecked, OnDestroy, QueryList, TemplateRef, ElementRef, AfterContentInit, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { ResizeService } from '../services/resize.service';\r\nimport { CarouselService } from '../services/carousel.service';\r\nimport { StageData } from \"../models/stage-data.model\";\r\nimport { OwlDOMData } from \"../models/owlDOM-data.model\";\r\nimport { SlideModel } from '../models/slide.model';\r\nimport { OwlOptions } from '../models/owl-options.model';\r\nimport { NavData, DotsData } from '../models/navigation-data.models';\r\nimport { NavigationService } from '../services/navigation.service';\r\nimport { AutoplayService } from '../services/autoplay.service';\r\nimport { LazyLoadService } from '../services/lazyload.service';\r\nimport { AnimateService } from '../services/animate.service';\r\nimport { AutoHeightService } from '../services/autoheight.service';\r\nimport { HashService } from '../services/hash.service';\r\nimport { OwlLogger } from '../services/logger.service';\r\nexport declare class CarouselSlideDirective {\r\n    tplRef: TemplateRef<any>;\r\n    /**\r\n     * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\r\n     * Will be auto-generated if not provided.\r\n     */\r\n    id: string;\r\n    /**\r\n     * Defines how much widths of common slide will current slide have\r\n     * e.g. if _mergeData=2, the slide will twice wider then slides with _mergeData=1\r\n     */\r\n    private _dataMerge;\r\n    set dataMerge(data: number);\r\n    get dataMerge(): number;\r\n    /**\r\n     * Width of slide\r\n     */\r\n    width: number;\r\n    /**\r\n     * Inner content of dot for certain slide; can be html-markup\r\n     */\r\n    dotContent: string;\r\n    /**\r\n     * Hash (fragment) of url which corresponds to certain slide\r\n     */\r\n    dataHash: string;\r\n    constructor(tplRef: TemplateRef<any>);\r\n    /**\r\n       * Determines if the input is a Number or something that can be coerced to a Number\r\n       * @param - The input to be tested\r\n       * @returns - An indication if the input is a Number or can be coerced to a Number\r\n       */\r\n    isNumeric(number: any): boolean;\r\n}\r\n/**\r\n * Data which will be passed out after ending of transition of carousel\r\n */\r\nexport declare class SlidesOutputData {\r\n    startPosition?: number;\r\n    slides?: SlideModel[];\r\n}\r\nexport declare class CarouselComponent implements OnInit, AfterContentChecked, AfterContentInit, OnDestroy {\r\n    private el;\r\n    private resizeService;\r\n    private carouselService;\r\n    private navigationService;\r\n    private autoplayService;\r\n    private lazyLoadService;\r\n    private animateService;\r\n    private autoHeightService;\r\n    private hashService;\r\n    private logger;\r\n    private changeDetectorRef;\r\n    slides: QueryList<CarouselSlideDirective>;\r\n    translated: EventEmitter<SlidesOutputData>;\r\n    dragging: EventEmitter<{\r\n        dragging: boolean;\r\n        data: SlidesOutputData;\r\n    }>;\r\n    change: EventEmitter<SlidesOutputData>;\r\n    changed: EventEmitter<SlidesOutputData>;\r\n    initialized: EventEmitter<SlidesOutputData>;\r\n    /**\r\n     * Width of carousel window (tag with class .owl-carousel), in wich we can see moving sliders\r\n     */\r\n    carouselWindowWidth: number;\r\n    /**\r\n     * Subscription to 'resize' event\r\n     */\r\n    resizeSubscription: Subscription;\r\n    /**\r\n     * Subscription merge Observable, which merges all Observables in the component except 'resize' Observable and this.slides.changes()\r\n     */\r\n    private _allObservSubscription;\r\n    /**\r\n     * Subscription to `this.slides.changes().\r\n     * It could be included in 'this._allObservSubscription', but that subcription get created during the initializing of component\r\n     * and 'this.slides' are undefined at that moment. So it's needed to wait for initialization of content.\r\n     */\r\n    private _slidesChangesSubscription;\r\n    /**\r\n     * Current settings for the carousel.\r\n     */\r\n    owlDOMData: OwlDOMData;\r\n    /**\r\n     * Data of owl-stage\r\n     */\r\n    stageData: StageData;\r\n    /**\r\n       *  Data of every slide\r\n       */\r\n    slidesData: SlideModel[];\r\n    /**\r\n       * Data of navigation block\r\n       */\r\n    navData: NavData;\r\n    /**\r\n     * Data of dots block\r\n     */\r\n    dotsData: DotsData;\r\n    /**\r\n     * Data, wich are passed out of carousel after ending of transioning of carousel\r\n     */\r\n    slidesOutputData: SlidesOutputData;\r\n    /**\r\n     * Shows whether carousel is loaded of not.\r\n     */\r\n    carouselLoaded: boolean;\r\n    /**\r\n     * User's options\r\n     */\r\n    options: OwlOptions;\r\n    /**\r\n     * Observable for getting current View Settings\r\n     */\r\n    private _viewCurSettings$;\r\n    /**\r\n     * Observable for catching the end of transition of carousel\r\n     */\r\n    private _translatedCarousel$;\r\n    /**\r\n     * Observable for catching the start of dragging of the carousel\r\n     */\r\n    private _draggingCarousel$;\r\n    /**\r\n     * Observable for catching the start of changing of the carousel\r\n     */\r\n    private _changeCarousel$;\r\n    /**\r\n     * Observable for catching the moment when the data about slides changed, more exactly when the position changed.\r\n     */\r\n    private _changedCarousel$;\r\n    /**\r\n     * Observable for catching the initialization of changing the carousel\r\n     */\r\n    private _initializedCarousel$;\r\n    /**\r\n     * Observable for merging all Observables and creating one subscription\r\n     */\r\n    private _carouselMerge$;\r\n    private docRef;\r\n    constructor(el: ElementRef, resizeService: ResizeService, carouselService: CarouselService, navigationService: NavigationService, autoplayService: AutoplayService, lazyLoadService: LazyLoadService, animateService: AnimateService, autoHeightService: AutoHeightService, hashService: HashService, logger: OwlLogger, changeDetectorRef: ChangeDetectorRef, docRef: any);\r\n    onVisibilityChange(ev: any): void;\r\n    ngOnInit(): void;\r\n    ngAfterContentChecked(): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Joins the observable login in one place: sets values to some observables, merges this observables and\r\n     * subcribes to merge func\r\n     */\r\n    spyDataStreams(): void;\r\n    /**\r\n     * Init subscription to resize event and attaches handler for this event\r\n     */\r\n    private _winResizeWatcher;\r\n    /**\r\n     * Handler for transitioend event\r\n     */\r\n    onTransitionEnd(): void;\r\n    /**\r\n     * Handler for click event, attached to next button\r\n     */\r\n    next(): void;\r\n    /**\r\n     * Handler for click event, attached to prev button\r\n     */\r\n    prev(): void;\r\n    /**\r\n     * Handler for click event, attached to dots\r\n     */\r\n    moveByDot(dotId: string): void;\r\n    /**\r\n     * rewinds carousel to slide with needed id\r\n     * @param id fragment of url\r\n     */\r\n    to(id: string): void;\r\n    /**\r\n     * Gathers and prepares data intended for passing to the user by means of firing event translatedCarousel\r\n     */\r\n    gatherTranslatedData(): void;\r\n    /**\r\n     * Starts pausing\r\n     */\r\n    startPausing(): void;\r\n    /**\r\n     * Starts playing after mouse leaves carousel\r\n     */\r\n    startPlayML(): void;\r\n    /**\r\n     * Starts playing after touch ends\r\n     */\r\n    startPlayTE(): void;\r\n    stopAutoplay(): void;\r\n    startAutoplay(): void;\r\n}\r\n"]}