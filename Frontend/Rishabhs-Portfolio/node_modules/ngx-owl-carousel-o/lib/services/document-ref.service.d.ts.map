{"version":3,"file":"document-ref.service.d.ts","sources":["document-ref.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ClassProvider, FactoryProvider, InjectionToken } from '@angular/core';\r\n/**\r\n * Create a new injection token for injecting the Document into a component.\r\n */\r\nexport declare const DOCUMENT: InjectionToken<Document>;\r\n/**\r\n * Define abstract class for obtaining reference to the global Document object.\r\n */\r\nexport declare abstract class DocumentRef {\r\n    get nativeDocument(): Document | Object;\r\n}\r\n/**\r\n * Define class that implements the abstract class and returns the native Document object.\r\n */\r\nexport declare class BrowserDocumentRef extends DocumentRef {\r\n    constructor();\r\n    /**\r\n     * @returns Document object\r\n     */\r\n    get nativeDocument(): Document | Object;\r\n}\r\n/**\r\n * Create an factory function that returns the native Document object.\r\n * @param browserDocumentRef Native Document object\r\n * @param platformId id of platform\r\n * @returns type of platform of empty object\r\n */\r\nexport declare function documentFactory(browserDocumentRef: BrowserDocumentRef, platformId: Object): Document | Object;\r\n/**\r\n * Create a injectable provider for the DocumentRef token that uses the BrowserDocumentRef class.\r\n */\r\nexport declare const browserDocumentProvider: ClassProvider;\r\n/**\r\n * Create an injectable provider that uses the DocumentFactory function for returning the native Document object.\r\n */\r\nexport declare const documentProvider: FactoryProvider;\r\n/**\r\n * Create an array of providers.\r\n */\r\nexport declare const DOCUMENT_PROVIDERS: (ClassProvider | FactoryProvider)[];\r\n"]}