{"version":3,"file":"carousel.service.d.ts","sources":["carousel.service.d.ts"],"names":[],"mappingssourcesContent":["import { StageData } from '../models/stage-data.model';\r\nimport { OwlDOMData } from '../models/owlDOM-data.model';\r\nimport { CarouselSlideDirective } from '../carousel/carousel.module';\r\nimport { SlideModel } from '../models/slide.model';\r\nimport { Observable } from 'rxjs';\r\nimport { OwlOptions } from '../models/owl-options.model';\r\nimport { NavData, DotsData } from '../models/navigation-data.models';\r\nimport { OwlLogger } from './logger.service';\r\n/**\r\n * Current state information and their tags.\r\n */\r\nexport declare class States {\r\n    current: {};\r\n    tags: {\r\n        [key: string]: string[];\r\n    };\r\n}\r\n/**\r\n * Enumeration for types.\r\n * @enum {String}\r\n */\r\nexport declare enum Type {\r\n    Event = \"event\",\r\n    State = \"state\"\r\n}\r\n/**\r\n * Enumeration for width.\r\n * @enum {String}\r\n */\r\nexport declare enum Width {\r\n    Default = \"default\",\r\n    Inner = \"inner\",\r\n    Outer = \"outer\"\r\n}\r\n/**\r\n * Model for coords of .owl-stage\r\n */\r\nexport declare class Coords {\r\n    x: number;\r\n    y: number;\r\n}\r\n/**\r\n * Model for all current data of carousel\r\n */\r\nexport declare class CarouselCurrentData {\r\n    owlDOMData: OwlDOMData;\r\n    stageData: StageData;\r\n    slidesData: SlideModel[];\r\n    navData: NavData;\r\n    dotsData: DotsData;\r\n}\r\nexport declare class CarouselService {\r\n    private logger;\r\n    /**\r\n   * Subject for passing data needed for managing View\r\n   */\r\n    private _viewSettingsShipper$;\r\n    /**\r\n   * Subject for notification when the carousel got initializes\r\n   */\r\n    private _initializedCarousel$;\r\n    /**\r\n   * Subject for notification when the carousel's settings start changinf\r\n   */\r\n    private _changeSettingsCarousel$;\r\n    /**\r\n   * Subject for notification when the carousel's settings have changed\r\n   */\r\n    private _changedSettingsCarousel$;\r\n    /**\r\n   * Subject for notification when the carousel starts translating or moving\r\n   */\r\n    private _translateCarousel$;\r\n    /**\r\n   * Subject for notification when the carousel stopped translating or moving\r\n   */\r\n    private _translatedCarousel$;\r\n    /**\r\n   * Subject for notification when the carousel's rebuilding caused by 'resize' event starts\r\n   */\r\n    private _resizeCarousel$;\r\n    /**\r\n   * Subject for notification  when the carousel's rebuilding caused by 'resize' event is ended\r\n   */\r\n    private _resizedCarousel$;\r\n    /**\r\n   * Subject for notification when the refresh of carousel starts\r\n   */\r\n    private _refreshCarousel$;\r\n    /**\r\n   * Subject for notification when the refresh of carousel is ended\r\n   */\r\n    private _refreshedCarousel$;\r\n    /**\r\n   * Subject for notification when the dragging of carousel starts\r\n   */\r\n    private _dragCarousel$;\r\n    /**\r\n   * Subject for notification when the dragging of carousel is ended\r\n   */\r\n    private _draggedCarousel$;\r\n    /**\r\n     * Current settings for the carousel.\r\n     */\r\n    settings: OwlOptions;\r\n    /**\r\n   * Initial data for setting classes to element .owl-carousel\r\n   */\r\n    owlDOMData: OwlDOMData;\r\n    /**\r\n   * Initial data of .owl-stage\r\n   */\r\n    stageData: StageData;\r\n    /**\r\n     *  Data of every slide\r\n     */\r\n    slidesData: SlideModel[];\r\n    /**\r\n     * Data of navigation block\r\n     */\r\n    navData: NavData;\r\n    /**\r\n     * Data of dots block\r\n     */\r\n    dotsData: DotsData;\r\n    /**\r\n     * Carousel width\r\n     */\r\n    private _width;\r\n    /**\r\n     * All real items.\r\n     */\r\n    private _items;\r\n    /**\r\n   * Array with width of every slide.\r\n   */\r\n    private _widths;\r\n    /**\r\n   * Currently suppressed events to prevent them from beeing retriggered.\r\n   */\r\n    private _supress;\r\n    /**\r\n     * References to the running plugins of this carousel.\r\n     */\r\n    private _plugins;\r\n    /**\r\n   * Absolute current position.\r\n   */\r\n    private _current;\r\n    /**\r\n   * All cloned items.\r\n   */\r\n    private _clones;\r\n    /**\r\n     * Merge values of all items.\r\n     * @todo Maybe this could be part of a plugin.\r\n     */\r\n    private _mergers;\r\n    /**\r\n   * Animation speed in milliseconds.\r\n   */\r\n    private _speed;\r\n    /**\r\n   * Coordinates of all items in pixel.\r\n   * @todo The name of this member is missleading.\r\n   */\r\n    private _coordinates;\r\n    /**\r\n   * Current breakpoint.\r\n   * @todo Real media queries would be nice.\r\n   */\r\n    private _breakpoint;\r\n    /**\r\n     * Prefix for id of cloned slides\r\n     */\r\n    clonedIdPrefix: string;\r\n    /**\r\n     * Current options set by the caller including defaults.\r\n     */\r\n    _options: OwlOptions;\r\n    /**\r\n     * Invalidated parts within the update process.\r\n     */\r\n    private _invalidated;\r\n    get invalidated(): any;\r\n    /**\r\n     * Current state information and their tags.\r\n     */\r\n    private _states;\r\n    get states(): States;\r\n    /**\r\n     * Ordered list of workers for the update process.\r\n   */\r\n    private _pipe;\r\n    constructor(logger: OwlLogger);\r\n    /**\r\n     * Makes _viewSettingsShipper$ Subject become Observable\r\n     * @returns Observable of _viewSettingsShipper$ Subject\r\n     */\r\n    getViewCurSettings(): Observable<CarouselCurrentData>;\r\n    /**\r\n     * Makes _initializedCarousel$ Subject become Observable\r\n     * @returns Observable of _initializedCarousel$ Subject\r\n     */\r\n    getInitializedState(): Observable<string>;\r\n    /**\r\n     * Makes _changeSettingsCarousel$ Subject become Observable\r\n     * @returns Observable of _changeSettingsCarousel$ Subject\r\n     */\r\n    getChangeState(): Observable<any>;\r\n    /**\r\n     * Makes _changedSettingsCarousel$ Subject become Observable\r\n     * @returns Observable of _changedSettingsCarousel$ Subject\r\n     */\r\n    getChangedState(): Observable<any>;\r\n    /**\r\n     * Makes _translateCarousel$ Subject become Observable\r\n     * @returns Observable of _translateCarousel$ Subject\r\n     */\r\n    getTranslateState(): Observable<string>;\r\n    /**\r\n     * Makes _translatedCarousel$ Subject become Observable\r\n     * @returns Observable of _translatedCarousel$ Subject\r\n     */\r\n    getTranslatedState(): Observable<string>;\r\n    /**\r\n     * Makes _resizeCarousel$ Subject become Observable\r\n     * @returns Observable of _resizeCarousel$ Subject\r\n     */\r\n    getResizeState(): Observable<string>;\r\n    /**\r\n     * Makes _resizedCarousel$ Subject become Observable\r\n     * @returns Observable of _resizedCarousel$ Subject\r\n     */\r\n    getResizedState(): Observable<string>;\r\n    /**\r\n     * Makes _refreshCarousel$ Subject become Observable\r\n     * @returns Observable of _refreshCarousel$ Subject\r\n     */\r\n    getRefreshState(): Observable<string>;\r\n    /**\r\n     * Makes _refreshedCarousel$ Subject become Observable\r\n     * @returns Observable of _refreshedCarousel$ Subject\r\n     */\r\n    getRefreshedState(): Observable<string>;\r\n    /**\r\n     * Makes _dragCarousel$ Subject become Observable\r\n     * @returns Observable of _dragCarousel$ Subject\r\n     */\r\n    getDragState(): Observable<string>;\r\n    /**\r\n     * Makes _draggedCarousel$ Subject become Observable\r\n     * @returns Observable of _draggedCarousel$ Subject\r\n     */\r\n    getDraggedState(): Observable<string>;\r\n    /**\r\n     * Setups custom options expanding default options\r\n     * @param options custom options\r\n     */\r\n    setOptions(options: OwlOptions): void;\r\n    /**\r\n     * Checks whether user's option are set properly. Cheking is based on typings;\r\n     * @param options options set by user\r\n     * @param configOptions default options\r\n     * @returns checked and modified (if it's needed) user's options\r\n     *\r\n     * Notes:\r\n     * \t- if user set option with wrong type, it'll be written in console\r\n     */\r\n    private _validateOptions;\r\n    /**\r\n     * Checks the option `items` set by user and if it bigger than number of slides, the function returns number of slides\r\n     * @param items option items set by user\r\n     * @param skip_validateItems option `skip_validateItems` set by user\r\n     * @returns right number of items\r\n     */\r\n    private _validateItems;\r\n    /**\r\n     * Set current width of carousel\r\n     * @param width width of carousel Window\r\n     */\r\n    setCarouselWidth(width: number): void;\r\n    /**\r\n       * Setups the current settings.\r\n       * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\r\n       * @todo Support for media queries by using `matchMedia` would be nice.\r\n       * @param carouselWidth width of carousel\r\n       * @param slides array of slides\r\n       * @param options options set by user\r\n       */\r\n    setup(carouselWidth: number, slides: CarouselSlideDirective[], options: OwlOptions): void;\r\n    /**\r\n     * Set options for current viewport\r\n     */\r\n    setOptionsForViewport(): void;\r\n    /**\r\n     * Initializes the carousel.\r\n     * @param slides array of CarouselSlideDirective\r\n     */\r\n    initialize(slides: CarouselSlideDirective[]): void;\r\n    /**\r\n     * Sends all data needed for View\r\n     */\r\n    sendChanges(): void;\r\n    /**\r\n       * Updates option logic if necessery\r\n       */\r\n    private _optionsLogic;\r\n    /**\r\n     * Updates the view\r\n     */\r\n    update(): void;\r\n    /**\r\n       * Gets the width of the view.\r\n       * @param [dimension=Width.Default] The dimension to return\r\n       * @returns The width of the view in pixel.\r\n       */\r\n    width(dimension?: Width): number;\r\n    /**\r\n       * Refreshes the carousel primarily for adaptive purposes.\r\n       */\r\n    refresh(): void;\r\n    /**\r\n       * Checks window `resize` event.\r\n       * @param curWidth width of .owl-carousel\r\n       */\r\n    onResize(curWidth: number): boolean;\r\n    /**\r\n       * Prepares data for dragging carousel. It starts after firing `touchstart` and `mousedown` events.\r\n       * @todo Horizontal swipe threshold as option\r\n       * @todo #261\r\n       * @param event - The event arguments.\r\n       * @returns stage - object with 'x' and 'y' coordinates of .owl-stage\r\n       */\r\n    prepareDragging(event: any): Coords;\r\n    /**\r\n     * Enters into a 'dragging' state\r\n     */\r\n    enterDragging(): void;\r\n    /**\r\n       * Defines new coords for .owl-stage while dragging it\r\n       * @todo #261\r\n       * @param event the event arguments.\r\n       * @param dragData initial data got after starting dragging\r\n       * @returns coords or false\r\n       */\r\n    defineNewCoordsDrag(event: any, dragData: any): boolean | Coords;\r\n    /**\r\n       * Finishes dragging of carousel when `touchend` and `mouseup` events fire.\r\n       * @todo #261\r\n       * @todo Threshold for click event\r\n       * @param event the event arguments.\r\n       * @param dragObj the object with dragging settings and states\r\n       * @param clickAttacher function which attaches click handler to slide or its children elements in order to prevent event bubling\r\n       */\r\n    finishDragging(event: any, dragObj: any, clickAttacher: () => void): void;\r\n    /**\r\n       * Gets absolute position of the closest item for a coordinate.\r\n       * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\r\n       * @param coordinate The coordinate in pixel.\r\n       * @param direction The direction to check for the closest item. Ether `left` or `right`.\r\n       * @returns The absolute position of the closest item.\r\n       */\r\n    closest(coordinate: number, direction: string): number;\r\n    /**\r\n       * Animates the stage.\r\n       * @todo #270\r\n       * @param coordinate The coordinate in pixels.\r\n       */\r\n    animate(coordinate: number | number[]): void;\r\n    /**\r\n       * Checks whether the carousel is in a specific state or not.\r\n       * @param state The state to check.\r\n       * @returns The flag which indicates if the carousel is busy.\r\n       */\r\n    is(state: string): boolean;\r\n    /**\r\n       * Sets the absolute position of the current item.\r\n       * @param position The new absolute position or nothing to leave it unchanged.\r\n       * @returns The absolute position of the current item.\r\n       */\r\n    current(position?: number): number;\r\n    /**\r\n       * Invalidates the given part of the update routine.\r\n       * @param part The part to invalidate.\r\n       * @returns The invalidated parts.\r\n       */\r\n    invalidate(part: string): string[];\r\n    /**\r\n     * Resets the absolute position of the current item.\r\n     * @param position the absolute position of the new item.\r\n     */\r\n    reset(position: number): void;\r\n    /**\r\n       * Normalizes an absolute or a relative position of an item.\r\n       * @param position The absolute or relative position to normalize.\r\n       * @param relative Whether the given position is relative or not.\r\n       * @returns The normalized position.\r\n       */\r\n    normalize(position: number, relative?: boolean): number;\r\n    /**\r\n       * Converts an absolute position of an item into a relative one.\r\n       * @param position The absolute position to convert.\r\n       * @returns The converted position.\r\n       */\r\n    relative(position: number): number;\r\n    /**\r\n       * Gets the maximum position for the current item.\r\n       * @param relative Whether to return an absolute position or a relative position.\r\n       * @returns number of maximum position\r\n       */\r\n    maximum(relative?: boolean): number;\r\n    /**\r\n       * Gets the minimum position for the current item.\r\n       * @param relative Whether to return an absolute position or a relative position.\r\n       * @returns number of minimum position\r\n       */\r\n    minimum(relative?: boolean): number;\r\n    /**\r\n       * Gets an item at the specified relative position.\r\n       * @param position The relative position of the item.\r\n       * @returns The item at the given position or all items if no position was given.\r\n       */\r\n    items(position?: number): CarouselSlideDirective[];\r\n    /**\r\n       * Gets an item at the specified relative position.\r\n       * @param position The relative position of the item.\r\n       * @returns The item at the given position or all items if no position was given.\r\n       */\r\n    mergers(position: number): number | number[];\r\n    /**\r\n       * Gets the absolute positions of clones for an item.\r\n       * @param position The relative position of the item.\r\n       * @returns The absolute positions of clones for the item or all if no position was given.\r\n       */\r\n    clones(position?: number): number[];\r\n    /**\r\n       * Sets the current animation speed.\r\n       * @param speed The animation speed in milliseconds or nothing to leave it unchanged.\r\n       * @returns The current animation speed in milliseconds.\r\n       */\r\n    speed(speed?: number): number;\r\n    /**\r\n       * Gets the coordinate of an item.\r\n       * @todo The name of this method is missleanding.\r\n       * @param position The absolute position of the item within `minimum()` and `maximum()`.\r\n       * @returns The coordinate of the item in pixel or all coordinates.\r\n       */\r\n    coordinates(position?: number): number | number[];\r\n    /**\r\n       * Calculates the speed for a translation.\r\n       * @param from The absolute position of the start item.\r\n       * @param to The absolute position of the target item.\r\n       * @param factor [factor=undefined] - The time factor in milliseconds.\r\n       * @returns The time in milliseconds for the translation.\r\n       */\r\n    private _duration;\r\n    /**\r\n       * Slides to the specified item.\r\n       * @param position The position of the item.\r\n       * @param speed The time in milliseconds for the transition.\r\n       */\r\n    to(position: number, speed: number | boolean): void;\r\n    /**\r\n       * Slides to the next item.\r\n       * @param speed The time in milliseconds for the transition.\r\n       */\r\n    next(speed: number | boolean): void;\r\n    /**\r\n       * Slides to the previous item.\r\n       * @param speed The time in milliseconds for the transition.\r\n       */\r\n    prev(speed: number | boolean): void;\r\n    /**\r\n       * Handles the end of an animation.\r\n       * @param event - The event arguments.\r\n       */\r\n    onTransitionEnd(event?: any): boolean;\r\n    /**\r\n       * Gets viewport width.\r\n       * @returns - The width in pixel.\r\n       */\r\n    private _viewport;\r\n    /**\r\n       * Sets _items\r\n       * @param content The list of slides put into CarouselSlideDirectives.\r\n       */\r\n    setItems(content: CarouselSlideDirective[]): void;\r\n    /**\r\n     * Sets slidesData using this._items\r\n     */\r\n    private _defineSlidesData;\r\n    /**\r\n     * Sets current classes for slide\r\n     * @param slide Slide of carousel\r\n     * @returns object with names of css-classes which are keys and true/false values\r\n     */\r\n    setCurSlideClasses(slide: SlideModel): {\r\n        [key: string]: boolean;\r\n    };\r\n    /**\r\n       * Operators to calculate right-to-left and left-to-right.\r\n       * @param a - The left side operand.\r\n       * @param o - The operator.\r\n       * @param b - The right side operand.\r\n       * @returns true/false meaning right-to-left or left-to-right\r\n       */\r\n    private _op;\r\n    /**\r\n       * Triggers a public event.\r\n       * @todo Remove `status`, `relatedTarget` should be used instead.\r\n       * @param name The event name.\r\n       * @param data The event data.\r\n       * @param namespace The event namespace.\r\n       * @param state The state which is associated with the event.\r\n       * @param enter Indicates if the call enters the specified state or not.\r\n       */\r\n    private _trigger;\r\n    /**\r\n     * Enters a state.\r\n     * @param name - The state name.\r\n     */\r\n    enter(name: string): void;\r\n    /**\r\n       * Leaves a state.\r\n       * @param name - The state name.\r\n       */\r\n    leave(name: string): void;\r\n    /**\r\n       * Registers an event or state.\r\n       * @param object - The event or state to register.\r\n       */\r\n    register(object: any): void;\r\n    /**\r\n       * Suppresses events.\r\n       * @param events The events to suppress.\r\n       */\r\n    private _suppress;\r\n    /**\r\n       * Releases suppressed events.\r\n       * @param events The events to release.\r\n       */\r\n    private _release;\r\n    /**\r\n       * Gets unified pointer coordinates from event.\r\n       * @todo #261\r\n       * @param event The `mousedown` or `touchstart` event.\r\n       * @returns Object Coords which contains `x` and `y` coordinates of current pointer position.\r\n       */\r\n    pointer(event: any): Coords;\r\n    /**\r\n       * Determines if the input is a Number or something that can be coerced to a Number\r\n       * @param number The input to be tested\r\n       * @returns An indication if the input is a Number or can be coerced to a Number\r\n       */\r\n    private _isNumeric;\r\n    /**\r\n     * Determines whether value is number or boolean type\r\n     * @param value The input to be tested\r\n     * @returns An indication if the input is a Number or can be coerced to a Number, or Boolean\r\n     */\r\n    private _isNumberOrBoolean;\r\n    /**\r\n     * Determines whether value is number or string type\r\n     * @param value The input to be tested\r\n     * @returns An indication if the input is a Number or can be coerced to a Number, or String\r\n     */\r\n    private _isNumberOrString;\r\n    /**\r\n     * Determines whether value is number or string type\r\n     * @param value The input to be tested\r\n     * @returns An indication if the input is a Number or can be coerced to a Number, or String\r\n     */\r\n    private _isStringOrBoolean;\r\n    /**\r\n       * Gets the difference of two vectors.\r\n       * @todo #261\r\n       * @param first The first vector.\r\n       * @param second The second vector.\r\n       * @returns The difference.\r\n       */\r\n    difference(first: Coords, second: Coords): Coords;\r\n}\r\n"]}