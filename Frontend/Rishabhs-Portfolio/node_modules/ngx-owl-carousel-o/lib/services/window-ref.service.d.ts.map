{"version":3,"file":"window-ref.service.d.ts","sources":["window-ref.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ClassProvider, FactoryProvider, InjectionToken } from '@angular/core';\r\n/**\r\n * Create a new injection token for injecting the window into a component.\r\n */\r\nexport declare const WINDOW: InjectionToken<unknown>;\r\n/**\r\n * Define abstract class for obtaining reference to the global window object.\r\n */\r\nexport declare abstract class WindowRef {\r\n    get nativeWindow(): Window | Object;\r\n}\r\n/**\r\n * Define class that implements the abstract class and returns the native window object.\r\n */\r\nexport declare class BrowserWindowRef extends WindowRef {\r\n    constructor();\r\n    /**\r\n     * @returns window object\r\n     */\r\n    get nativeWindow(): Window | Object;\r\n}\r\n/**\r\n * Create an factory function that returns the native window object.\r\n * @param browserWindowRef Native window object\r\n * @param platformId id of platform\r\n * @returns type of platform of empty object\r\n */\r\nexport declare function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object;\r\n/**\r\n * Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class.\r\n */\r\nexport declare const browserWindowProvider: ClassProvider;\r\n/**\r\n * Create an injectable provider that uses the windowFactory function for returning the native window object.\r\n */\r\nexport declare const windowProvider: FactoryProvider;\r\n/**\r\n * Create an array of providers.\r\n */\r\nexport declare const WINDOW_PROVIDERS: (ClassProvider | FactoryProvider)[];\r\n"]}