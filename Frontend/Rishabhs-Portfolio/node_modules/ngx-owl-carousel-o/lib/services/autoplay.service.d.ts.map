{"version":3,"file":"autoplay.service.d.ts","sources":["autoplay.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { CarouselService } from './carousel.service';\r\nexport declare class AutoplayService implements OnDestroy {\r\n    private carouselService;\r\n    /**\r\n     * Subscrioption to merge Observables from CarouselService\r\n     */\r\n    autoplaySubscription: Subscription;\r\n    /**\r\n     * The autoplay timeout.\r\n     */\r\n    private _timeout;\r\n    /**\r\n     * Indicates whenever the autoplay is paused.\r\n     */\r\n    private _paused;\r\n    /**\r\n     * Shows whether the code (the plugin) changed the option 'AutoplayTimeout' for own needs\r\n     */\r\n    private _isArtificialAutoplayTimeout;\r\n    /**\r\n     * Shows whether the autoplay is paused for unlimited time by the developer.\r\n     * Use to prevent autoplaying in case of firing `mouseleave` by adding layers to `<body>` like `mat-menu` does\r\n     */\r\n    private _isAutoplayStopped;\r\n    get isAutoplayStopped(): boolean;\r\n    set isAutoplayStopped(value: boolean);\r\n    private winRef;\r\n    private docRef;\r\n    constructor(carouselService: CarouselService, winRef: any, docRef: any);\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Defines Observables which service must observe\r\n     */\r\n    spyDataStreams(): void;\r\n    /**\r\n       * Starts the autoplay.\r\n       * @param timeout The interval before the next animation starts.\r\n       * @param speed The animation speed for the animations.\r\n       */\r\n    play(timeout?: number, speed?: number): void;\r\n    /**\r\n       * Gets a new timeout\r\n       * @param timeout - The interval before the next animation starts.\r\n       * @param speed - The animation speed for the animations.\r\n       * @return\r\n       */\r\n    private _getNextTimeout;\r\n    /**\r\n       * Sets autoplay in motion.\r\n       */\r\n    private _setAutoPlayInterval;\r\n    /**\r\n     * Stops the autoplay.\r\n     */\r\n    stop(): void;\r\n    /**\r\n       * Stops the autoplay.\r\n       */\r\n    pause(): void;\r\n    /**\r\n     * Manages by autoplaying according to data passed by _changedSettingsCarousel$ Obsarvable\r\n     * @param data object with current position of carousel and type of change\r\n     */\r\n    private _handleChangeObservable;\r\n    /**\r\n     * Starts autoplaying of the carousel in the case when user leaves the carousel before it starts translateing (moving)\r\n     */\r\n    private _playAfterTranslated;\r\n    /**\r\n     * Starts pausing\r\n     */\r\n    startPausing(): void;\r\n    /**\r\n     * Starts playing after mouse leaves carousel\r\n     */\r\n    startPlayingMouseLeave(): void;\r\n    /**\r\n     * Starts playing after touch ends\r\n     */\r\n    startPlayingTouchEnd(): void;\r\n}\r\n"]}