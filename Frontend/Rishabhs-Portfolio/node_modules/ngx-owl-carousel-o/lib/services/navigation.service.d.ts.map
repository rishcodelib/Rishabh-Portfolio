{"version":3,"file":"navigation.service.d.ts","sources":["navigation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\r\nimport { NavData, DotsData } from '../models/navigation-data.models';\r\nimport { CarouselService } from './carousel.service';\r\nimport { Subscription } from 'rxjs';\r\nexport declare class NavigationService implements OnDestroy {\r\n    private carouselService;\r\n    /**\r\n     * Subscrioption to merge Observable  from CarouselService\r\n     */\r\n    navSubscription: Subscription;\r\n    /**\r\n     * Indicates whether the plugin is initialized or not.\r\n     */\r\n    protected _initialized: boolean;\r\n    /**\r\n     * The current paging indexes.\r\n     */\r\n    protected _pages: any[];\r\n    /**\r\n     * Data for navigation elements of the user interface.\r\n     */\r\n    protected _navData: NavData;\r\n    /**\r\n     * Data for dot elements of the user interface.\r\n     */\r\n    protected _dotsData: DotsData;\r\n    constructor(carouselService: CarouselService);\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Defines Observables which service must observe\r\n     */\r\n    spyDataStreams(): void;\r\n    /**\r\n       * Initializes the layout of the plugin and extends the carousel.\r\n       */\r\n    initialize(): void;\r\n    /**\r\n     * Calculates internal states and updates prop _pages\r\n     */\r\n    private _updateNavPages;\r\n    /**\r\n       * Draws the user interface.\r\n       * @todo The option `dotsData` wont work.\r\n       */\r\n    draw(): void;\r\n    /**\r\n     * Updates navigation buttons's and dots's states\r\n     */\r\n    update(): void;\r\n    /**\r\n     * Changes state of nav buttons (disabled, enabled)\r\n     */\r\n    private _updateNavButtons;\r\n    /**\r\n     * Changes active dot if page becomes changed\r\n     */\r\n    private _updateDots;\r\n    /**\r\n       * Gets the current page position of the carousel.\r\n       * @returns the current page position of the carousel\r\n       */\r\n    private _current;\r\n    /**\r\n       * Gets the current succesor/predecessor position.\r\n     * @param sussessor position of slide\r\n       * @returns the current succesor/predecessor position\r\n       */\r\n    private _getPosition;\r\n    /**\r\n       * Slides to the next item or page.\r\n       * @param speed The time in milliseconds for the transition.\r\n       */\r\n    next(speed: number | boolean): void;\r\n    /**\r\n     * Slides to the previous item or page.\r\n     * @param speed The time in milliseconds for the transition.\r\n     */\r\n    prev(speed: number | boolean): void;\r\n    /**\r\n     * Slides to the specified item or page.\r\n     * @param position - The position of the item or page.\r\n     * @param speed - The time in milliseconds for the transition.\r\n     * @param standard - Whether to use the standard behaviour or not. Default meaning false\r\n     */\r\n    to(position: number, speed: number | boolean, standard?: boolean): void;\r\n    /**\r\n     * Moves carousel after user's clicking on any dots\r\n     */\r\n    moveByDot(dotId: string): void;\r\n    /**\r\n     * rewinds carousel to slide with needed id\r\n     * @param id id of slide\r\n     */\r\n    toSlideById(id: string): void;\r\n}\r\n"]}